apply plugin: 'com.android.application'
apply plugin: 'kotlin-android'
apply plugin: 'kotlin-android-extensions'

def versionPropsFile = file('version.properties')
def appName = "hunterWMS"

android {
    signingConfigs {
    }
    compileSdkVersion 29

    if (versionPropsFile.canRead()) {
        Properties versionProps = new Properties()

        versionProps.load(new FileInputStream(versionPropsFile))
        def runTasks = gradle.startParameter.taskNames
        def versionMajor = versionProps['VERSION_MAJOR'].toInteger()
        def versionMinor = versionProps['VERSION_MINOR'].toInteger()
        def versionPatch = versionProps['VERSION_PATCH'].toInteger()
        def versionRun = versionProps['VERSION_RUN'].toInteger() + 1

        if (":WMS:assemble" in runTasks || ":WMS:assembleRelease" in runTasks || ":WMS:aR" in runTasks) {
            versionPatch = versionPatch + 1
            versionRun = 0
        }

        versionProps['VERSION_PATCH'] = versionPatch.toString()
        versionProps['VERSION_RUN'] = versionRun.toString()

        defaultConfig {
            applicationId "com.gtp.hunter"
            minSdkVersion 22
            targetSdkVersion 29
            versionCode versionMajor * 1000 + versionMinor * 100 + versionPatch
            versionName "${versionMajor}.${versionMinor}.${versionPatch}"
        }

        buildTypes {
            debug {
                minifyEnabled false
                resValue "string", "app_version", "${defaultConfig.versionName}-${versionRun}"
                resValue "string", "app_name", "${appName}"
            }
            release {
                minifyEnabled false
                proguardFiles getDefaultProguardFile('proguard-android-optimize.txt'), 'proguard-rules.pro'
                resValue "string", "app_version", "${defaultConfig.versionName}"
                resValue "string", "app_name", "${appName}"
                setProperty("archivesBaseName", "${appName}-${defaultConfig.versionName}")
                applicationVariants.all { variant ->
                    variant.outputs.all {
                        outputFileName = "${appName}-${defaultConfig.versionName}.apk"
                    }
                }
            }
        }
        versionProps.store(versionPropsFile.newWriter(), null)
    } else {
        throw new GradleException("Could not read version.properties!")
    }
    compileOptions {
        sourceCompatibility JavaVersion.VERSION_1_8
        targetCompatibility JavaVersion.VERSION_1_8
    }
    // Do NOT compress tflite model files (need to call out to developers!)
    aaptOptions {
        noCompress "tflite"
    }
//    dataBinding {
//        enabled = true
//    }
}

repositories {
    maven { url 'https://google.bintray.com/tensorflow' }
}

dependencies {
    implementation "androidx.legacy:legacy-support-v4:1.0.0"
    implementation "com.google.guava:guava:${versions.guava}"
    annotationProcessor "androidx.room:room-compiler:${versions.room}"
    implementation fileTree(include: ['*.jar'], dir: 'libs')
    implementation "androidx.annotation:annotation:1.1.0"
    implementation "androidx.constraintlayout:constraintlayout:2.0.4"
    implementation "androidx.appcompat:appcompat:${versions.androidx_appcompat}"
    implementation "com.google.android.material:material:${versions.androidx}"
    implementation "androidx.recyclerview:recyclerview:${versions.androidx_delayed}"
    implementation "androidx.vectordrawable:vectordrawable:${versions.androidx_delayed}"
    implementation "com.squareup.retrofit2:retrofit:${versions.retrofit}"
    implementation "com.squareup.retrofit2:adapter-rxjava2:${versions.retrofit}"
    implementation "com.squareup.retrofit2:converter-gson:${versions.retrofit}"
    implementation "com.squareup.retrofit2:converter-scalars:${versions.retrofit}"
    implementation "androidx.lifecycle:lifecycle-extensions:2.2.0"
//    implementation 'com.toptoche.searchablespinner:searchablespinnerlibrary:1.3.1'
    implementation project(":DeviceList")
    implementation project(":Rfid.AsciiProtocol")
    implementation project(":hunterML")
    implementation "io.reactivex.rxjava2:rxjava:2.1.16"
    implementation "androidx.room:room-runtime:2.2.6"
    implementation "org.jetbrains.kotlin:kotlin-stdlib:${versions.kotlin}"
    testImplementation 'junit:junit:4.12'
//    implementation 'com.google.firebase:firebase-ml-vision:24.0.3'
//    implementation 'com.google.firebase:firebase-ml-vision-barcode-model:16.1.1'
    implementation "com.google.mlkit:barcode-scanning:16.0.3"
    implementation "androidx.camera:camera-core:${versions.camerax}"
    implementation "androidx.camera:camera-camera2:${versions.camerax}"
    implementation "androidx.camera:camera-lifecycle:${versions.camerax}"
    implementation "androidx.camera:camera-view:1.0.0-alpha17"
    implementation "com.mapbox.mapboxsdk:mapbox-android-sdk:9.5.0"
    implementation "com.mapbox.mapboxsdk:mapbox-android-plugin-offline-v9:0.7.0"
    implementation 'com.mapbox.mapboxsdk:mapbox-android-plugin-annotation-v9:0.9.0'
    //implementation "com.mapbox.mapboxsdk:mapbox-sdk-core:5.5.0"
    //implementation "com.mapbox.mapboxsdk:mapbox-sdk-services:5.5.0"
}