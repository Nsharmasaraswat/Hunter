package com.gtp.hunter.custom.solar.realpicking;

class RealPicking {

	//	public static String getDeliveryQuery() {
	//		StringBuilder sql = new StringBuilder("SELECT ");
	//
	//		sql.append(" LM.LOCATION_ID, LM.TRIP_NUMBER, LM.DELIVERY_DATE, LM.LOAD_STATUS, ");
	//		sql.append(" LM.VEHICLE_ID, VEICULO.VEHICLE_TAG_NUMBER, VEICULO.VEHICLE_DESCRIPTION, ");
	//		sql.append(" LM.LOAD_ID, BAIA.BAY_ID, BM.BAY_LABEL, BAIA.PICKING_TICKET_MESSAGE, ");
	//		sql.append(" BAIA.CASES_PHYSICAL, BAIA.NUMBER_OF_SKUS, ");
	//		sql.append(" BAIA_PROD.SEQUENCE_TICKET,BAIA_PROD.PRODUCT_ID, PROD.PRODUCT_DESCRIPTION_LONG, ");
	//		sql.append(" PROD.PRODUCT_DESCRIPTION_SHORT, ");
	//		sql.append(" BAIA_PROD.QUANTITY, BAIA_PROD.SEPARATOR_AFTER_TICKET, ");
	//		sql.append(" BAIA_PROD.LAYER_DESCRIPTION, BAIA_PROD.HIGHLIGHT, BAIA.IS_FULL_PALLET ");
	//
	//		sql.append(" FROM H_LOAD_MASTER LM  ");
	//		sql.append(" INNER JOIN H_LOAD_BAYS BAIA ON LM.LOCATION_ID = BAIA.LOCATION_ID ");
	//		sql.append("							AND LM.TRIP_NUMBER = BAIA.TRIP_NUMBER");
	//		sql.append(" INNER JOIN T_VEHICLE_MASTER VEICULO ON VEICULO.VEHICLE_ID = LM.VEHICLE_ID ");
	//		sql.append(" INNER JOIN H_PICKING_TICKET_LAYERS BAIA_PROD ON BAIA_PROD.LOCATION_ID = BAIA.LOCATION_ID");
	//		sql.append(" 		   					AND BAIA_PROD.TRIP_NUMBER = BAIA.TRIP_NUMBER ");
	//		sql.append(" 		   					AND BAIA_PROD.BAY_ID = BAIA.BAY_ID ");
	//		sql.append(" INNER JOIN T_PRODUCT_MASTER PROD ON PROD.PRODUCT_ID = BAIA_PROD.PRODUCT_ID ");
	//		sql.append(" INNER JOIN T_BAY_MASTER BM ON BM.BAY_ID = BAIA_PROD.BAY_ID ");
	//		sql.append(" 		   					AND BM.VEHICLE_TYPE_ID = VEICULO.VEHICLE_TYPE_ID ");
	//
	//		sql.append(" WHERE	LM.DELIVERY_DATE = ? AND ");// -- Data de entrega 
	//		sql.append(" 		LM.LOCATION_ID = ? AND ");// -- Unidade
	//		sql.append("        LM.LOAD_STATUS = 50 ");// -- 50 = IMPRESSO
	//
	//		sql.append(" ORDER BY LM.LOCATION_ID, LM.TRIP_NUMBER, LM.DELIVERY_DATE, LM.VEHICLE_ID, ");
	//		sql.append(" 		BAIA.BAY_ID, BAIA_PROD.SEQUENCE_TICKET, PROD.PRODUCT_DESCRIPTION_LONG ");
	//		//		return "Select LM.LOCATION_ID, LM.TRIP_NUMBER, LM.DELIVERY_DATE, LM.VEHICLE_ID, VEICULO.VEHICLE_TAG_NUMBER, VEICULO.VEHICLE_DESCRIPTION,LM.LOAD_ID,\n" + "        BAIA.BAY_ID, BM.BAY_LABEL, BAIA.PICKING_TICKET_MESSAGE, BAIA.CASES_PHYSICAL, BAIA.NUMBER_OF_SKUS,\n" + "        BAIA_PROD.SEQUENCE_TICKET,BAIA_PROD.PRODUCT_ID, PROD.PRODUCT_DESCRIPTION_LONG, PROD.PRODUCT_DESCRIPTION_SHORT, BAIA_PROD.QUANTITY, BAIA_PROD.SEPARATOR_AFTER_TICKET,\n" + "        BAIA_PROD.LAYER_DESCRIPTION, BAIA_PROD.HIGHLIGHT, BAIA.IS_FULL_PALLET\n" + "\n" + "from H_LOAD_MASTER LM join H_LOAD_BAYS BAIA\n" + "        ON LM.LOCATION_ID = BAIA.LOCATION_ID AND\n" + "           LM.TRIP_NUMBER = BAIA.TRIP_NUMBER\n" + "                    JOIN T_VEHICLE_MASTER VEICULO\n" + "        ON VEICULO.VEHICLE_ID = LM.VEHICLE_ID\n" + "                    JOIN H_PICKING_TICKET_LAYERS BAIA_PROD\n" + "        ON BAIA_PROD.LOCATION_ID = BAIA.LOCATION_ID AND\n" + "           BAIA_PROD.TRIP_NUMBER = BAIA.TRIP_NUMBER AND\n" + "           BAIA_PROD.BAY_ID      = BAIA.BAY_ID\n" + "                    JOIN T_PRODUCT_MASTER PROD\n" + "        ON PROD.PRODUCT_ID = BAIA_PROD.PRODUCT_ID\n" + "                    JOIN T_BAY_MASTER BM\n" + "        ON BM.BAY_ID     = BAIA_PROD.BAY_ID AND\n" + "           BM.VEHICLE_TYPE_ID = VEICULO.VEHICLE_TYPE_ID\n" + "\n" + "WHERE    LM.DELIVERY_DATE = ? AND -- Data de entrega\n" + "        LM.LOCATION_ID = 'CNAT' -- Unidade\n" + "\n" + "ORDER BY LM.LOCATION_ID, LM.TRIP_NUMBER, LM.DELIVERY_DATE, LM.VEHICLE_ID, BAIA.BAY_ID, BAIA_PROD.SEQUENCE_TICKET, PROD.PRODUCT_DESCRIPTION_LONG";

	//		return sql.toString();
	//	}

	public static String getDeliveryQuery() {
		StringBuilder sql = new StringBuilder("SELECT ");

		sql.append("  LM.LOCATION_ID AS PLANT ");
		sql.append(" , LM.TRIP_NUMBER  AS TRIP_NUMBER ");
		sql.append(" , LM.DELIVERY_DATE AS DELIVERY_DATE ");
		sql.append(" , LM.VEHICLE_ID AS VEHICLE_ID ");
		sql.append(" , VEICULO.VEHICLE_TAG_NUMBER AS VEHICLE_TAG_NUMBER ");
		sql.append(" , VEICULO.VEHICLE_DESCRIPTION AS VEHICLE_DESCRIPTION ");
		sql.append(" , LM.LOAD_ID AS LOAD_ID ");
		sql.append(" , LM.LOAD_STATUS AS LOAD_STATUS ");
		sql.append(" , BAIA.BAY_ID AS BAY_ID ");
		sql.append(" , BM.BAY_LABEL AS BAY_LABEL ");
		sql.append(" , BAIA.PICKING_TICKET_MESSAGE AS PICKING_TICKET_MESSAGE ");
		sql.append(" , BAIA.CASES_PHYSICAL AS CASES_PHYSICAL ");
		sql.append(" , BAIA.NUMBER_OF_SKUS AS NUMBER_OF_SKUS ");
		sql.append(" , CASE WHEN BAIA_PROD.BAY_ID IS NULL THEN PTC.CONTAINER_LEVEL_ID ELSE BAIA_PROD.SEQUENCE_TICKET END AS SEQUENCE_TICKET ");
		sql.append(" , PROD.PRODUCT_ID AS PRODUCT_ID ");
		sql.append(" , PROD.PRODUCT_DESCRIPTION_LONG AS PRODUCT_DESCRIPTION_LONG ");
		sql.append(" , PROD.PRODUCT_DESCRIPTION_SHORT AS PRODUCT_DESCRIPTION_SHORT ");
		sql.append(" , CASE WHEN BAIA_PROD.BAY_ID IS NULL THEN PTC.QUANTITY ELSE BAIA_PROD.QUANTITY END AS QUANTITY ");
		sql.append(" , CASE WHEN BAIA_PROD.BAY_ID IS NULL THEN 0 ELSE BAIA_PROD.SEPARATOR_AFTER_TICKET END AS SEPARATOR_AFTER_TICKET ");
		sql.append(" , CASE WHEN BAIA_PROD.BAY_ID IS NULL THEN CAST(PTC.CONTAINER_LEVEL_ID AS CHAR(5)) ELSE BAIA_PROD.LAYER_DESCRIPTION END AS LAYER_DESCRIPTION ");
		sql.append(" , CASE WHEN BAIA_PROD.BAY_ID IS NULL THEN 0 ELSE BAIA_PROD.HIGHLIGHT END AS HIGHLIGHT ");
		sql.append(" , CASE WHEN BAIA_PROD.BAY_ID IS NULL THEN 0 ELSE BAIA.IS_FULL_PALLET END AS IS_FULL_PALLET ");
		sql.append(" FROM T_LOAD_MASTER LM ");
		sql.append(" LEFT JOIN T_VEHICLE_MASTER VEICULO ON VEICULO.VEHICLE_ID = LM.VEHICLE_ID ");
		sql.append(" LEFT JOIN H_LOAD_BAYS BAIA ON LM.LOCATION_ID = BAIA.LOCATION_ID AND LM.TRIP_NUMBER = BAIA.TRIP_NUMBER ");
		sql.append(" LEFT JOIN H_PICKING_TICKET_LAYERS BAIA_PROD ON BAIA_PROD.LOCATION_ID = BAIA.LOCATION_ID AND BAIA_PROD.TRIP_NUMBER = BAIA.TRIP_NUMBER AND BAIA_PROD.BAY_ID = BAIA.BAY_ID ");
		sql.append(" LEFT JOIN T_PICKING_TICKET_CONTAINER PTC ON PTC.TRIP_NUMBER = LM.TRIP_NUMBER AND PTC.BAY_ID = BAIA.BAY_ID ");
		sql.append(" LEFT JOIN T_BAY_MASTER BM ON (BM.BAY_ID = BAIA_PROD.BAY_ID OR BM.BAY_ID = PTC.BAY_ID) AND BM.VEHICLE_TYPE_ID = VEICULO.VEHICLE_TYPE_ID ");
		sql.append(" JOIN T_PRODUCT_MASTER PROD ON PROD.PRODUCT_ID = BAIA_PROD.PRODUCT_ID OR PROD.PRODUCT_ID = PTC.PRODUCT_ID ");
		sql.append(" WHERE LM.DELIVERY_DATE = ? ");// -- Data de entrega 
		sql.append(" 	AND LM.LOCATION_ID = ? ");// -- Unidade
		sql.append(" 	AND LM.LOAD_STATUS = '60' ");// -- 50 = EXPORTADO
		sql.append(" ORDER BY LM.LOCATION_ID, LM.TRIP_NUMBER, LM.DELIVERY_DATE, LM.VEHICLE_ID, BAIA.BAY_ID, BAIA_PROD.SEQUENCE_TICKET, PTC.CONTAINER_LEVEL_ID, BAIA_PROD.QUANTITY DESC, PTC.QUANTITY DESC, PROD.PRODUCT_DESCRIPTION_LONG ");

		return sql.toString();
	}

	public static String getTripQuery() {
		StringBuilder sql = new StringBuilder("SELECT ");

		sql.append(" LM.LOCATION_ID, LM.TRIP_NUMBER, LM.DELIVERY_DATE, LM.LOAD_STATUS, ");
		sql.append(" LM.VEHICLE_ID, VEICULO.VEHICLE_TAG_NUMBER, VEICULO.VEHICLE_DESCRIPTION, ");
		sql.append(" LM.LOAD_ID, SUM(BAIA.CASES_PHYSICAL) AS CASES_PHYSICAL, COUNT(DISTINCT BAIA.BAY_ID) AS PALLETS, SUM(CASE WHEN BAIA.IS_FULL_PALLET = 'true' THEN 1 ELSE 0 END) AS FULL_PALLETS ");

		sql.append(" FROM T_LOAD_MASTER LM  ");
		sql.append(" INNER JOIN H_LOAD_BAYS BAIA ON LM.LOCATION_ID = BAIA.LOCATION_ID ");
		sql.append("							AND LM.TRIP_NUMBER = BAIA.TRIP_NUMBER");
		sql.append(" INNER JOIN T_VEHICLE_MASTER VEICULO ON VEICULO.VEHICLE_ID = LM.VEHICLE_ID ");

		sql.append(" WHERE	LM.DELIVERY_DATE = ? AND ");// -- Data de entrega 
		sql.append(" 		LM.LOCATION_ID = ? AND ");// -- Unidade
		sql.append("        LM.LOAD_STATUS = 60 ");// -- 50 = IMPRESSO

		sql.append(" GROUP BY LM.LOCATION_ID, LM.TRIP_NUMBER, LM.DELIVERY_DATE, LM.VEHICLE_ID, VEICULO.VEHICLE_TAG_NUMBER, VEICULO.VEHICLE_DESCRIPTION, LM.LOAD_ID, LM.LOAD_STATUS ");
		sql.append(" ORDER BY LM.LOCATION_ID, LM.TRIP_NUMBER, LM.DELIVERY_DATE, LM.VEHICLE_ID");

		return sql.toString();
	}

	public static String getPickQuery() {
		StringBuilder sql = new StringBuilder("SELECT  ");

		sql.append(" LM.TRIP_NUMBER, LM.DELIVERY_DATE, LM.LOCATION_ID, ");
		sql.append(" MAX(LM.LOAD_ID) AS 'LOAD_ID', BAIA.BAY_ID AS 'BAY_ID', MAX(BM.BAY_LABEL) AS 'BAY_LABEL', MAX(BAIA.PICKING_TICKET_MESSAGE) AS 'PICKING_TICKET_MESSAGE', ");
		sql.append(" MAX(BAIA.CASES_PHYSICAL) AS 'CASES_PHYSICAL', ");
		sql.append(" MAX(BAIA.NUMBER_OF_SKUS) AS 'NUMBER_OF_SKUS', ");
		sql.append(" BAIA.IS_FULL_PALLET AS 'IS_FULL_PALLET', ");
		sql.append(" MAX(PTC.CONTAINER_ID) AS 'CONTAINER_ID', MAX(CONTAINER_LEVEL_ID) AS 'CONTAINER_LEVELS' ");

		sql.append(" FROM T_LOAD_MASTER LM ");
		sql.append(" INNER JOIN H_LOAD_BAYS BAIA ON LM.LOCATION_ID = BAIA.LOCATION_ID ");
		sql.append(" AND LM.TRIP_NUMBER = BAIA.TRIP_NUMBER ");
		sql.append(" INNER JOIN T_VEHICLE_MASTER VEICULO ON VEICULO.VEHICLE_ID = LM.VEHICLE_ID ");
		sql.append(" INNER JOIN T_BAY_MASTER BM ON BM.BAY_ID = BAIA.BAY_ID AND BM.VEHICLE_TYPE_ID = VEICULO.VEHICLE_TYPE_ID ");
		sql.append(" LEFT JOIN T_PICKING_TICKET_CONTAINER PTC ON PTC.TRIP_NUMBER = LM.TRIP_NUMBER AND PTC.BAY_ID = BAIA.BAY_ID ");

		sql.append(" WHERE ");
		sql.append(" LM.TRIP_NUMBER = ? ");
		sql.append(" AND LM.LOCATION_ID = ? ");
		sql.append(" AND BAIA.CASES_PHYSICAL > 0 ");

		sql.append(" GROUP BY LM.LOCATION_ID, LM.TRIP_NUMBER, LM.DELIVERY_DATE, LM.VEHICLE_ID, BAIA.BAY_ID, BAIA.IS_FULL_PALLET ");
		sql.append(" ORDER BY LM.LOCATION_ID, LM.TRIP_NUMBER, LM.DELIVERY_DATE, LM.VEHICLE_ID, BAIA.BAY_ID, BAIA.IS_FULL_PALLET ");

		return sql.toString();
	}

	public static String getProductQuery() {
		StringBuilder sb = new StringBuilder();

		//		-- Lista cadastro de produtos RealPicking
		//		-- Query Produtos que NÃO ESTÃO na tabela de exceção (produtos PADRAO)
		sb.append(" SELECT");
		sb.append("    p.PRODUCT_ID as pPRODUCT_ID");
		sb.append("  , p.PRODUCT_DESCRIPTION_LONG as pPRODUCT_DESCRIPTION_LONG");
		sb.append("  , p.PRODUCT_DESCRIPTION_SHORT as pPRODUCT_DESCRIPTION_SHORT");
		sb.append("  , p.PACKAGE_ID as pPACKAGE_ID");
		sb.append("  , p.PICKING_QUANTITY_DESCRIPTION as pPICKING_QUANTITY_DESCRIPTION");
		sb.append("  , pm.PACKAGE_ID as pmPACKAGE_ID");
		sb.append("  , pm.PICKING_UNIT_DESCRIPTION as pmPICKING_UNIT_DESCRIPTION");
		sb.append("  , pm.NUMBER_OF_SUBUNITS as pmNUMBER_OF_SUBUNITS");
		sb.append("  , pm.SUBUNIT_DESCRIPTION as pmSUBUNIT_DESCRIPTION");
		sb.append("  , pm.PACKAGE_LARGER_SIDE as pmPACKAGE_LARGER_SIDE");
		sb.append("  , pm.PACKAGE_SMALLER_SIDE as pmPACKAGE_SMALLER_SIDE");
		sb.append("  , pm.PACKAGE_HEIGHT as pmPACKAGE_HEIGHT");
		sb.append("  , pm.PACKAGE_WEIGHT as pmPACKAGE_WEIGHT");
		sb.append("  , pl.PACKAGE_ID as plPACKAGE_ID");
		sb.append("  , pl.QUANTITY_STANDARD as plQUANTITY_STANDARD");
		sb.append("  , pl.PALLET_HEIGHT as plPALLET_HEIGHT");

		sb.append(" from T_PRODUCT_MASTER p");
		sb.append(" inner join T_PACKAGE_MASTER pm on pm.PACKAGE_ID = p.PACKAGE_ID");
		sb.append(" inner join T_PALLET_MASTER pl on pl.PACKAGE_ID = p.PACKAGE_ID");
		sb.append(" inner join T_LAYER_MASTER lm on lm.PACKAGE_ID = p.PACKAGE_ID");
		sb.append(" WHERE NOT EXISTS (SELECT 1 FROM T_MASTERS_EXCEPTIONS me ");
		sb.append("                   WHERE me.EXCEPTION_KEY_VALUE = p.PRODUCT_ID");
		sb.append("                     and me.LOCATION_ID = ?)");// -- Unidade

		//		-- Query Produtos que NÃO ESTÃO na tabela de exceção (produtos PADRAO)
		sb.append(" UNION");
		//		-- Query Produtos que ESTÃO na tabela de exceção (produtos NÃO PADRAO)
		sb.append(" SELECT");
		sb.append("    p.PRODUCT_ID as pPRODUCT_ID");
		sb.append("  , p.PRODUCT_DESCRIPTION_LONG as pPRODUCT_DESCRIPTION_LONG");
		sb.append("  , p.PRODUCT_DESCRIPTION_SHORT as pPRODUCT_DESCRIPTION_SHORT");
		sb.append("  , me.EXCEPTION_VALUE_01 as pPACKAGE_ID");
		sb.append("  , p.PICKING_QUANTITY_DESCRIPTION as pPICKING_QUANTITY_DESCRIPTION");
		sb.append("  , pm.PACKAGE_ID as pmPACKAGE_ID");
		sb.append("  , pm.PICKING_UNIT_DESCRIPTION as pmPICKING_UNIT_DESCRIPTION");
		sb.append("  , pm.NUMBER_OF_SUBUNITS as pmNUMBER_OF_SUBUNITS");
		sb.append("  , pm.SUBUNIT_DESCRIPTION as pmSUBUNIT_DESCRIPTION");
		sb.append("  , pm.PACKAGE_LARGER_SIDE as pmPACKAGE_LARGER_SIDE");
		sb.append("  , pm.PACKAGE_SMALLER_SIDE as pmPACKAGE_SMALLER_SIDE");
		sb.append("  , pm.PACKAGE_HEIGHT as pmPACKAGE_HEIGHT");
		sb.append("  , pm.PACKAGE_WEIGHT as pmPACKAGE_WEIGHT");
		sb.append("  , pl.PACKAGE_ID as plPACKAGE_ID");
		sb.append("  , pl.QUANTITY_STANDARD as plQUANTITY_STANDARD");
		sb.append("  , pl.PALLET_HEIGHT as plPALLET_HEIGHT");

		sb.append(" from T_MASTERS_EXCEPTIONS me");
		sb.append("    inner join T_PRODUCT_MASTER p on p.PRODUCT_ID = me.EXCEPTION_KEY_VALUE");
		sb.append("    inner join T_PACKAGE_MASTER pm on pm.PACKAGE_ID = me.EXCEPTION_VALUE_01");
		sb.append("    inner join T_PALLET_MASTER pl on pl.PACKAGE_ID = me.EXCEPTION_VALUE_01");
		sb.append("    inner join T_LAYER_MASTER lm on lm.PACKAGE_ID = me.EXCEPTION_VALUE_01");
		sb.append(" WHERE me.LOCATION_ID = ?");// -- Unidade

		//		-- Query Produtos que ESTÃO na tabela de exceção (produtos NÃO PADRAO)
		return sb.toString();
	}

	//	public static String getPickItemsQuery() {
	//		StringBuilder sb = new StringBuilder("SELECT");
	//		sb.append("  LM.TRIP_NUMBER, BAIA.BAY_ID, BM.BAY_LABEL, LM.LOAD_ID, ");
	//		sb.append("  BAIA_PROD.SEQUENCE_TICKET,BAIA_PROD.PRODUCT_ID, PROD.PRODUCT_DESCRIPTION_LONG, ");
	//		sb.append("  PROD.PRODUCT_DESCRIPTION_SHORT, ");
	//		sb.append("  BAIA_PROD.QUANTITY, BAIA_PROD.SEPARATOR_AFTER_TICKET, ");
	//		sb.append("  BAIA_PROD.LAYER_DESCRIPTION, BAIA_PROD.HIGHLIGHT, BAIA.IS_FULL_PALLET ");
	//
	//		sb.append("  FROM H_LOAD_MASTER LM ");
	//		sb.append("  INNER JOIN H_LOAD_BAYS BAIA ON LM.LOCATION_ID = BAIA.LOCATION_ID ");
	//		sb.append(" 							AND LM.TRIP_NUMBER = BAIA.TRIP_NUMBER ");
	//		sb.append("  INNER JOIN T_VEHICLE_MASTER VEICULO ON VEICULO.VEHICLE_ID = LM.VEHICLE_ID ");
	//		sb.append("  INNER JOIN H_PICKING_TICKET_LAYERS BAIA_PROD ON BAIA_PROD.LOCATION_ID = BAIA.LOCATION_ID ");
	//		sb.append(" 		   					AND BAIA_PROD.TRIP_NUMBER = BAIA.TRIP_NUMBER ");
	//		sb.append(" 		   					AND BAIA_PROD.BAY_ID = BAIA.BAY_ID ");
	//		sb.append("  INNER JOIN T_PRODUCT_MASTER PROD ON PROD.PRODUCT_ID = BAIA_PROD.PRODUCT_ID ");
	//		sb.append("  INNER JOIN T_BAY_MASTER BM ON BM.BAY_ID = BAIA_PROD.BAY_ID ");
	//		sb.append(" 		   					AND BM.VEHICLE_TYPE_ID = VEICULO.VEHICLE_TYPE_ID ");
	//
	//		sb.append("  WHERE	LM.TRIP_NUMBER = ? ");
	//		sb.append(" 	AND BM.BAY_LABEL = ? ");
	//		sb.append(" 	AND LM.LOCATION_ID = ?");
	//
	//		sb.append("  ORDER BY LM.LOCATION_ID, LM.TRIP_NUMBER, LM.DELIVERY_DATE, LM.VEHICLE_ID, ");
	//		sb.append("  		BAIA.BAY_ID, BAIA_PROD.SEQUENCE_TICKET, PROD.PRODUCT_DESCRIPTION_LONG ");
	//		return sb.toString();
	//	}
	public static String getPickItemsQuery() {
		StringBuilder sb = new StringBuilder("SELECT ");
		sb.append(" LM.TRIP_NUMBER AS TRIP_NUMBER ");
		sb.append(" , LM.LOAD_ID AS LOAD_ID ");
		sb.append(" , BAIA.BAY_ID AS BAY_ID ");
		sb.append(" , BM.BAY_LABEL AS BAY_LABEL ");
		sb.append(" , CASE WHEN BAIA_PROD.BAY_ID IS NULL THEN PTC.CONTAINER_LEVEL_ID ELSE BAIA_PROD.SEQUENCE_TICKET END AS SEQUENCE_TICKET ");
		sb.append(" , PROD.PRODUCT_ID AS PRODUCT_ID ");
		sb.append(" , PROD.PRODUCT_DESCRIPTION_LONG AS PRODUCT_DESCRIPTION_LONG ");
		sb.append(" , PROD.PRODUCT_DESCRIPTION_SHORT AS PRODUCT_DESCRIPTION_SHORT ");
		sb.append(" , CASE WHEN BAIA_PROD.BAY_ID IS NULL THEN PTC.QUANTITY ELSE BAIA_PROD.QUANTITY END AS QUANTITY ");
		sb.append(" , CASE WHEN BAIA_PROD.BAY_ID IS NULL THEN 0 ELSE BAIA_PROD.SEPARATOR_AFTER_TICKET END AS SEPARATOR_AFTER_TICKET ");
		sb.append(" , CASE WHEN BAIA_PROD.BAY_ID IS NULL THEN CAST(PTC.CONTAINER_LEVEL_ID AS CHAR(5)) ELSE BAIA_PROD.LAYER_DESCRIPTION END AS LAYER_DESCRIPTION ");
		sb.append(" , CASE WHEN BAIA_PROD.BAY_ID IS NULL THEN 0 ELSE BAIA_PROD.HIGHLIGHT END AS HIGHLIGHT ");
		sb.append(" , CASE WHEN BAIA_PROD.BAY_ID IS NULL THEN 0 ELSE BAIA.IS_FULL_PALLET END AS IS_FULL_PALLET ");
		sb.append(" FROM T_LOAD_MASTER LM ");
		sb.append(" LEFT JOIN T_VEHICLE_MASTER VEICULO ON VEICULO.VEHICLE_ID = LM.VEHICLE_ID ");
		sb.append(" LEFT JOIN H_LOAD_BAYS BAIA ON LM.LOCATION_ID = BAIA.LOCATION_ID AND LM.TRIP_NUMBER = BAIA.TRIP_NUMBER ");
		sb.append(" LEFT JOIN H_PICKING_TICKET_LAYERS BAIA_PROD ON BAIA_PROD.LOCATION_ID = BAIA.LOCATION_ID AND BAIA_PROD.TRIP_NUMBER = BAIA.TRIP_NUMBER AND BAIA_PROD.BAY_ID = BAIA.BAY_ID ");
		sb.append(" LEFT JOIN T_PICKING_TICKET_CONTAINER PTC ON PTC.TRIP_NUMBER = LM.TRIP_NUMBER AND PTC.BAY_ID = BAIA.BAY_ID ");
		sb.append(" LEFT JOIN T_BAY_MASTER BM ON (BM.BAY_ID = BAIA_PROD.BAY_ID OR BM.BAY_ID = PTC.BAY_ID) AND BM.VEHICLE_TYPE_ID = VEICULO.VEHICLE_TYPE_ID ");
		sb.append(" JOIN T_PRODUCT_MASTER PROD ON PROD.PRODUCT_ID = BAIA_PROD.PRODUCT_ID OR PROD.PRODUCT_ID = PTC.PRODUCT_ID ");
		sb.append(" WHERE LM.TRIP_NUMBER = ? ");
		sb.append(" 	AND BM.BAY_LABEL = ? ");
		sb.append(" 	AND LM.LOCATION_ID = ? ");
		sb.append(" ORDER BY LM.LOCATION_ID, LM.TRIP_NUMBER, LM.DELIVERY_DATE, LM.VEHICLE_ID, BAIA.BAY_ID, BAIA_PROD.SEQUENCE_TICKET, PTC.CONTAINER_LEVEL_ID, BAIA_PROD.QUANTITY DESC, PTC.QUANTITY DESC, PROD.PRODUCT_DESCRIPTION_LONG ");

		return sb.toString();
	}

	public static String getContainerItemsQuery() {
		StringBuilder sb = new StringBuilder("  SELECT ");

		sb.append("  LM.LOCATION_ID AS PLANT, LM.TRIP_NUMBER AS TRIP_NUMBER, LM.DELIVERY_DATE AS DELIVERY_DATE, ");
		sb.append("  LM.VEHICLE_ID AS VEHICLE_ID, VM.VEHICLE_TAG_NUMBER AS VEHICLE_TAG_NUMBER, ");
		sb.append("  VM.VEHICLE_DESCRIPTION AS VEHICLE_DESCRIPTION, LM.LOAD_ID AS LOAD_ID, BM.BAY_ID AS BAY_ID, ");
		sb.append("  BM.BAY_LABEL AS BAY_LABEL, LB.PICKING_TICKET_MESSAGE AS PICKING_TICKET_MESSAGE, ");
		sb.append("  LB.CASES_PHYSICAL AS CASES_PHYSICAL, LB.NUMBER_OF_SKUS AS NUMBER_OF_SKUS, ");
		sb.append("  PT.SEQUENCE_TICKET AS SEQUENCE_, PTC.PRODUCT_ID AS PRODUCT_ID, ");
		sb.append("  PM.PRODUCT_DESCRIPTION_LONG AS PRODUCT_DESCRIPTION_LONG, ");
		sb.append("  PM.PRODUCT_DESCRIPTION_SHORT AS PRODUCT_DESCRIPTION_SHORT, PTC.QUANTITY AS QUANTITY, ");
		sb.append("  PT.SEPARATOR_AFTER_TICKET AS SEPARATOR_AFTER_TICKET, PTC.LAYER_DESC AS LAYER_DESCRIPTION, ");
		sb.append("  PT.HIGHLIGHT AS HIGHLIGHT, LB.IS_FULL_PALLET AS IS_FULL_PALLET, ");
		sb.append("  PTC.CONTAINER_LEVEL_ID AS CONTAINER_LEVEL, PTC.ROW_START AS ROW_START, PTC.ROW_DESC AS ROW_DESC, ");
		sb.append("  PTC.LAYER_START AS LAYER_START, LM.LAST_PRINTED AS LAST_PRINTEDFROM T_LOAD_MASTER LM ");
		sb.append("  LEFT JOIN T_PICKING_TICKET_CONTAINER PTC ON (PTC.TRIP_NUMBER = LM.TRIP_NUMBER) ");
		sb.append("  LEFT JOIN T_VEHICLE_MASTER VM ON (VM.VEHICLE_ID = LM.VEHICLE_ID) ");
		sb.append("  LEFT JOIN T_VEHICLE_TYPE_MASTER VTM ON (VTM.VEHICLE_TYPE_ID = VM.VEHICLE_TYPE_ID) ");
		sb.append("  LEFT JOIN T_BAY_MASTER BM ON (BM.BAY_ID = PTC.BAY_ID AND BM.VEHICLE_TYPE_ID = VM.VEHICLE_TYPE_ID) ");
		sb.append("  LEFT JOIN H_LOAD_BAYS LB ON LM.LOCATION_ID = LB.LOCATION_ID AND LM.TRIP_NUMBER = LB.TRIP_NUMBER AND LB.BAY_ID = BM.BAY_ID ");
		sb.append("  LEFT JOIN H_PICKING_TICKET_LAYERS PT ON PT.LOCATION_ID = LB.LOCATION_ID AND PT.TRIP_NUMBER = LB.TRIP_NUMBER AND PT.BAY_ID = LB.BAY_ID ");
		sb.append("  JOIN T_PRODUCT_MASTER PM ON (PM.PRODUCT_ID = PTC.PRODUCT_ID) ");
		sb.append("  WHERE ");
		sb.append("  	LM.TRIP_NUMBER = ? ");
		sb.append("  	AND BM.BAY_LABEL = ? ");
		sb.append("     AND LM.LOCATION_ID = ? ");
		sb.append("     AND LM.VEHICLE_ID IS NOT NULL ");
		sb.append("     AND PTC.PRODUCT_ID IS NOT NULL ");
		sb.append("     AND LM.LOAD_STATUS = '60' ");
		sb.append("  ORDER BY LM.LOCATION_ID, LM.TRIP_NUMBER, LM.DELIVERY_DATE, LM.VEHICLE_ID, LB.BAY_ID, PT.SEQUENCE_TICKET ");
		sb.append("  PTC.CONTAINER_LEVEL_ID, PTC.ROW_START, PM.PRODUCT_DESCRIPTION_LONG ");

		return sb.toString();
	}

	public static String getVehicleCapacityQuery() {
		StringBuilder sb = new StringBuilder("SELECT V.VEHICLE_ID AS VEHICLE_ID, COUNT(DISTINCT B.BAY_ID) AS BAY_COUNT ");//--, MAX(B.BAY_SEQUENCE)

		sb.append(" FROM T_VEHICLE_MASTER V ");
		sb.append(" INNER JOIN T_BAY_MASTER B ON V.VEHICLE_TYPE_ID = B.VEHICLE_TYPE_ID ");
		sb.append(" WHERE VEHICLE_ID = ? AND B.BAY_ID > 0 ");
		sb.append(" GROUP BY V.VEHICLE_ID;");

		return sb.toString();
	}
}
